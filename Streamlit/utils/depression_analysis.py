import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import streamlit as st
import os

def cargar_datos_depresion():
    """Carga y prepara el dataset de depresi√≥n estudiantil."""
    try:
        file_path = os.path.join(
            os.path.dirname(os.path.dirname(__file__)),
            'static',
            'datasets',
            'student_depression_dataset.csv'
        )
        df = pd.read_csv(file_path)
        
        # Seleccionar solo las columnas relevantes
        columnas_relevantes = [
            'Age',
            'Sleep Duration',
            'Dietary Habits',
            'Have you ever had suicidal thoughts ?',
            'Work/Study Hours',
            'Financial Stress',
            'Family History of Mental Illness',
            'Depression'
        ]
        
        df = df[columnas_relevantes]
        
        # Traducir valores al espa√±ol
        df = df.rename(columns={
            'Age': 'Edad',
            'Sleep Duration': 'Horas_Sue√±o',
            'Dietary Habits': 'Dieta',
            'Have you ever had suicidal thoughts ?': 'Pensamientos_Suicidas',
            'Work/Study Hours': 'Horas_Estudio_Trabajo',
            'Financial Stress': 'Estr√©s_Financiero',
            'Family History of Mental Illness': 'Historial_Familiar',
            'Depression': 'Depresi√≥n'
        })
        
        # Traducir valores categ√≥ricos
        df['Pensamientos_Suicidas'] = df['Pensamientos_Suicidas'].map({'Yes': 'S√≠', 'No': 'No'})
        df['Historial_Familiar'] = df['Historial_Familiar'].map({'Yes': 'S√≠', 'No': 'No'})
        df['Depresi√≥n'] = df['Depresi√≥n'].map({1: 'S√≠', 0: 'No'})
        df['Dieta'] = df['Dieta'].map({
            'Healthy': 'Saludable',
            'Moderate': 'Moderada',
            'Unhealthy': 'No saludable'
        })
        
        # Limpiar espacios en blanco y comillas en la columna de horas de sue√±o
        df['Horas_Sue√±o'] = df['Horas_Sue√±o'].str.strip(" '")
        
        # Traducir rangos de horas de sue√±o
        mapeo_horas_sue√±o = {
            'Less than 5 hours': 'Menos de 5 horas',
            '5-6 hours': '5-6 horas',
            '7-8 hours': '7-8 horas',
            'More than 8 hours': 'M√°s de 8 horas'
        }
        
        # Aplicar el mapeo solo a valores no nulos
        df['Horas_Sue√±o'] = df['Horas_Sue√±o'].apply(
            lambda x: mapeo_horas_sue√±o.get(x, x) if pd.notnull(x) else 'No especificado'
        )
        
        # Llenar valores nulos con 'No especificado'
        df['Horas_Sue√±o'] = df['Horas_Sue√±o'].fillna('No especificado')
        
        return df
    except Exception as e:
        st.error(f"Error al cargar los datos de depresi√≥n: {e}")
        return None

def analizar_salud_mental(df):
    """Analiza los aspectos de salud mental."""
    st.header("üîç An√°lisis de Salud Mental")
    
    # Explicaci√≥n de los valores de depresi√≥n
    st.markdown("""
    ### üìå Nota sobre los valores de depresi√≥n:
    - **S√≠**: El estudiante presenta indicadores de depresi√≥n
    - **No**: El estudiante no presenta indicadores de depresi√≥n
    """)
    
    # Gr√°fico de distribuci√≥n de depresi√≥n
    fig1 = px.pie(
        df, 
        names='Depresi√≥n',
        title='Distribuci√≥n de Depresi√≥n en Estudiantes',
        color='Depresi√≥n',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={'Depresi√≥n': ['No', 'S√≠']},
        labels={'Depresi√≥n': 'Estado de Depresi√≥n'}
    )
    fig1.update_traces(
        textposition='inside', 
        textinfo='percent+label+value',
        hovertemplate='%{label}: %{percent} (%{value} estudiantes)<extra></extra>'
    )
    
    # Explicaci√≥n del gr√°fico
    st.markdown("""
    #### Distribuci√≥n de Depresi√≥n
    Este gr√°fico muestra el porcentaje de estudiantes que presentan indicadores de depresi√≥n 
    en comparaci√≥n con los que no. La depresi√≥n se evalu√≥ mediante un cuestionario validado.
    """)
    
    # Mostrar gr√°ficos en dos columnas
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.plotly_chart(fig1, use_container_width=True, key='distribucion_depresion')
    
    # Gr√°fico de pensamientos suicidas vs depresi√≥n
    st.markdown("---")
    st.markdown("""
    #### Relaci√≥n entre Pensamientos Suicidas y Depresi√≥n
    Este gr√°fico explora la asociaci√≥n entre reportar pensamientos suicidas y el diagn√≥stico de depresi√≥n.
    Es importante notar que no todos los estudiantes con pensamientos suicidas tienen depresi√≥n cl√≠nica,
    y viceversa.
    """)
    
    fig2 = px.histogram(
        df, 
        x='Pensamientos_Suicidas',
        color='Depresi√≥n',
        title='Pensamientos Suicidas vs Depresi√≥n',
        barmode='group',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={
            'Pensamientos_Suicidas': ['No', 'S√≠'],
            'Depresi√≥n': ['No', 'S√≠']
        },
        labels={
            'Pensamientos_Suicidas': '¬øHa tenido pensamientos suicidas?',
            'count': 'N√∫mero de Estudiantes',
            'Depresi√≥n': 'Diagn√≥stico de Depresi√≥n'
        }
    )
    fig2.update_layout(
        xaxis_title='¬øHa tenido pensamientos suicidas?',
        yaxis_title='N√∫mero de Estudiantes',
        legend_title='Depresi√≥n',
        hovermode='x unified'
    )
    
    with col2:
        st.plotly_chart(fig2, use_container_width=True, key='pensamientos_suicidas')

def analizar_estilo_vida(df):
    """Analiza los aspectos del estilo de vida."""
    st.header("üèÉ‚Äç‚ôÇÔ∏è An√°lisis de Estilo de Vida")
    
    st.markdown("""
    ### Relaci√≥n entre Estilo de Vida y Depresi√≥n
    Los siguientes gr√°ficos muestran c√≥mo los patrones de sue√±o y alimentaci√≥n se relacionan 
    con la depresi√≥n en los estudiantes.
    """)
    
    # Gr√°fico de duraci√≥n del sue√±o vs depresi√≥n
    st.markdown("#### Horas de Sue√±o y su Relaci√≥n con la Depresi√≥n")
    st.markdown("""
    Este gr√°fico de cajas muestra la distribuci√≥n de horas de sue√±o entre estudiantes 
    con y sin depresi√≥n. Las cajas representan el rango intercuart√≠lico, la l√≠nea dentro 
    de la caja es la mediana, y los bigotes muestran el rango de los datos.
    """)
    
    fig1 = px.box(
        df, 
        x='Depresi√≥n',
        y='Horas_Sue√±o',
        color='Depresi√≥n',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={'Depresi√≥n': ['No', 'S√≠']},
        labels={
            'Horas_Sue√±o': 'Horas de Sue√±o',
            'Depresi√≥n': 'Diagn√≥stico de Depresi√≥n'
        }
    )
    fig1.update_layout(
        xaxis_title='Diagn√≥stico de Depresi√≥n',
        yaxis_title='Horas de Sue√±o',
        showlegend=False,
        hovermode='x unified'
    )
    
    # Gr√°fico de h√°bitos alimenticios
    st.markdown("---")
    st.markdown("#### Calidad de la Dieta y su Relaci√≥n con la Depresi√≥n")
    st.markdown("""
    Este gr√°fico compara los h√°bitos alimenticios entre estudiantes con y sin depresi√≥n.
    Se categoriz√≥ la dieta como 'Saludable', 'Moderada' o 'No saludable' seg√∫n los 
    reportes de los estudiantes.
    """)
    
    fig2 = px.histogram(
        df, 
        x='Dieta',
        color='Depresi√≥n',
        title='Calidad de la Dieta vs Depresi√≥n',
        barmode='group',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={
            'Dieta': ['No saludable', 'Moderada', 'Saludable'],
            'Depresi√≥n': ['No', 'S√≠']
        },
        labels={
            'Dieta': 'Calidad de la Dieta',
            'count': 'N√∫mero de Estudiantes',
            'Depresi√≥n': 'Diagn√≥stico de Depresi√≥n'
        }
    )
    fig2.update_layout(
        xaxis_title='Calidad de la Dieta',
        yaxis_title='N√∫mero de Estudiantes',
        legend_title='Depresi√≥n',
        hovermode='x unified'
    )
    
    # Mostrar gr√°ficos en dos columnas
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)

def analizar_factores_estres(df):
    """Analiza los factores de estr√©s."""
    st.header("üí° Factores de Estr√©s y su Impacto en la Salud Mental")
    
    st.markdown("""
    ### Influencia de Factores de Estr√©s en la Depresi√≥n
    Los siguientes gr√°ficos exploran c√≥mo diferentes factores de estr√©s se relacionan 
    con la presencia de depresi√≥n en los estudiantes.
    """)
    
    # Gr√°fico de estr√©s financiero
    st.markdown("#### Nivel de Estr√©s Financiero")
    st.markdown("""
    Este gr√°fico muestra la relaci√≥n entre el nivel de estr√©s financiero auto-reportado 
    (en una escala del 1 al 5, donde 1 es 'Ning√∫n estr√©s' y 5 es 'Estr√©s extremo') y 
    la presencia de depresi√≥n.
    """)
    
    fig1 = px.histogram(
        df, 
        x='Estr√©s_Financiero',
        color='Depresi√≥n',
        title='Nivel de Estr√©s Financiero vs Depresi√≥n',
        barmode='group',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={
            'Estr√©s_Financiero': [1, 2, 3, 4, 5],
            'Depresi√≥n': ['No', 'S√≠']
        },
        labels={
            'Estr√©s_Financiero': 'Nivel de Estr√©s Financiero (1-5)',
            'count': 'N√∫mero de Estudiantes',
            'Depresi√≥n': 'Diagn√≥stico de Depresi√≥n'
        }
    )
    fig1.update_layout(
        xaxis_title='Nivel de Estr√©s Financiero (1-5)',
        yaxis_title='N√∫mero de Estudiantes',
        legend_title='Depresi√≥n',
        hovermode='x unified'
    )
    
    # Gr√°fico de historial familiar
    st.markdown("---")
    st.markdown("#### Historial Familiar de Enfermedad Mental")
    st.markdown("""
    Este gr√°fico muestra la relaci√≥n entre tener antecedentes familiares de enfermedad 
    mental y la presencia de depresi√≥n en los estudiantes.
    """)
    
    fig2 = px.histogram(
        df, 
        x='Historial_Familiar',
        color='Depresi√≥n',
        title='Historial Familiar de Enfermedad Mental vs Depresi√≥n',
        barmode='group',
        color_discrete_map={'No': '#2ecc71', 'S√≠': '#e74c3c'},
        category_orders={
            'Historial_Familiar': ['No', 'S√≠'],
            'Depresi√≥n': ['No', 'S√≠']
        },
        labels={
            'Historial_Familiar': '¬øTiene historial familiar de enfermedad mental?',
            'count': 'N√∫mero de Estudiantes',
            'Depresi√≥n': 'Diagn√≥stico de Depresi√≥n'
        }
    )
    fig2.update_layout(
        xaxis_title='¬øTiene historial familiar de enfermedad mental?',
        yaxis_title='N√∫mero de Estudiantes',
        legend_title='Depresi√≥n',
        hovermode='x unified'
    )
    
    # Mostrar gr√°ficos en dos columnas
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)

def mostrar_datos_brutos(df):
    """Muestra una muestra de los datos brutos."""
    st.header("üìã Muestra de Datos")
    st.dataframe(df, use_container_width=True)

def generar_conclusiones(df):
    """Genera conclusiones basadas en el an√°lisis."""
    st.header("üìå Conclusiones y Recomendaciones")
    
    # Calcular estad√≠sticas para las conclusiones
    total_estudiantes = len(df)
    tasa_depresion = (df['Depresi√≥n'] == 'S√≠').mean() * 100
    
    # Obtener estad√≠sticas de sue√±o
    df['Horas_Sue√±o'] = pd.to_numeric(df['Horas_Sue√±o'], errors='coerce')
    sueno_menos_5h = df[df['Horas_Sue√±o'] < 5]
    tasa_depresion_sueno_menos_5h = (sueno_menos_5h['Depresi√≥n'] == 'S√≠').mean() * 100 if not sueno_menos_5h.empty else 0
    
    # Obtener estad√≠sticas de dieta
    dieta_saludable = df[df['Dieta'] == 'Saludable']
    tasa_depresion_dieta_saludable = (dieta_saludable['Depresi√≥n'] == 'S√≠').mean() * 100
    
    # Obtener estad√≠sticas de estr√©s financiero
    # Convertir a num√©rico y manejar valores faltantes
    df['Estr√©s_Financiero'] = pd.to_numeric(df['Estr√©s_Financiero'], errors='coerce')
    estres_alto = df[df['Estr√©s_Financiero'] >= 4]
    tasa_depresion_estres_alto = (estres_alto['Depresi√≥n'] == 'S√≠').mean() * 100 if not estres_alto.empty else 0
    
    # Obtener estad√≠sticas de historial familiar
    con_historial = df[df['Historial_Familiar'] == 'S√≠']
    tasa_depresion_con_historial = (con_historial['Depresi√≥n'] == 'S√≠').mean() * 100
    
    st.markdown(f"""
    ### Hallazgos Principales
    
    Se analizaron un total de **{total_estudiantes} estudiantes**, encontrando que:
    - **{tasa_depresion:.1f}%** presentan indicadores de depresi√≥n
    - **{tasa_depresion_sueno_menos_5h:.1f}%** de los que duermen menos de 5 horas tienen depresi√≥n
    - Solo **{tasa_depresion_dieta_saludable:.1f}%** de los estudiantes con dieta saludable presentan depresi√≥n
    - **{tasa_depresion_estres_alto:.1f}%** de los estudiantes con alto estr√©s financiero tienen depresi√≥n
    - **{tasa_depresion_con_historial:.1f}%** de estudiantes con historial familiar de enfermedad mental presentan depresi√≥n
    
    ### Conclusiones Clave
    """)
    
    conclusiones = [
        f"üîπ **Sue√±o insuficiente**: Los estudiantes que duermen menos de 5 horas tienen una tasa de depresi√≥n significativamente mayor ({tasa_depresion_sueno_menos_5h:.1f}% vs {tasa_depresion:.1f}% general).",
        f"üîπ **Dieta saludable**: Solo el {tasa_depresion_dieta_saludable:.1f}% de los estudiantes con dieta saludable presentan depresi√≥n, comparado con el {tasa_depresion:.1f}% general.",
        f"üîπ **Estr√©s financiero**: El {tasa_depresion_estres_alto:.1f}% de los estudiantes con alto estr√©s financiero presentan depresi√≥n.",
        f"üîπ **Historial familiar**: Los estudiantes con antecedentes familiares tienen una tasa de depresi√≥n del {tasa_depresion_con_historial:.1f}%.",
        "üîπ **Pensamientos suicidas**: Existe una fuerte correlaci√≥n entre reportar pensamientos suicidas y diagn√≥stico de depresi√≥n."
    ]
    
    for conclusion in conclusiones:
        st.markdown(conclusion)
    
    st.markdown("""
    ### Recomendaciones Estrat√©gicas
    
    1. **Programas de Higiene del Sue√±o**
       - Talleres sobre h√°bitos de sue√±o saludables
       - Creaci√≥n de espacios para siestas en el campus
       
    2. **Orientaci√≥n Nutricional**
       - Talleres de alimentaci√≥n saludable
       - Colaboraci√≥n con servicios de alimentaci√≥n para ofrecer opciones m√°s saludables
       
    3. **Apoyo Financiero**
       - Asesor√≠as sobre manejo de finanzas personales
       - Programas de becas y apoyo econ√≥mico
       
    4. **Salud Mental**
       - Talleres de manejo del estr√©s
       - Servicios de consejer√≠a accesibles
       - Grupos de apoyo entre pares
       
    5. **Detecci√≥n Temprana**
       - Tamizajes peri√≥dicos de salud mental
       - Capacitaci√≥n para personal docente en identificaci√≥n de se√±ales de alerta
    """)
